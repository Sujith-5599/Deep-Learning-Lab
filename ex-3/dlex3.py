# -*- coding: utf-8 -*-
"""DLex3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ak4ZdFavBw77I0iBjsUPMuN_4G8N0g7G
"""

import torch 
from torch import nn          
from torch.autograd import grad
class RBF(nn.Module):
    def __init__(self):
        super(RBF, self).__init__()
    def forward(self, X, Y):
        sqd=torch.std(X)
        y=sum(X)/len(X)
        return torch.exp(-(X-y)**2/ (2 * sqd**2))
model=RBF()
def loss_function(y,pred_y):
        return ((y-pred_y)**2).mean()
losses = []
x=torch.tensor([[1.,1.],[1.,0.],[0.,1.],[0.,0.]])
Y=torch.tensor([0,1,1,0])
for i in range(0,4):
    print(x[i])
    pred_y = model(x[i],Y)
    loss = loss_function(Y[i], pred_y)
    losses.append(loss.item())
import matplotlib.pyplot as plt
plt.plot(losses)
plt.ylabel('loss')
plt.xlabel('epoch')
plt.show()