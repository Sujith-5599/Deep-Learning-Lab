
3a) 
import torch
import torch.nn as nn
import torch.nn.functional as F

class RBF(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(RBF, self).__init__()
        self.hidden_layer = nn.Linear(input_size, hidden_size, bias=False)
        self.output_layer = nn.Linear(hidden_size, output_size, bias=False)

    def forward(self, x):
        hidden = torch.exp(-torch.sum((self.hidden_layer(x)**2), dim=1))
        out = self.output_layer(hidden)
        return out

input_size = 5
hidden_size = 4
output_size = 1
model = RBF(input_size, hidden_size, output_size)
-------------------------------------------------------------------------------
3b)
import numpy as np
import keras
from keras.models import Sequential
from keras.layers import Dense, Activation

input_size = 5
hidden_size = 4
output_size = 1

model = Sequential()
model.add(Dense(hidden_size, input_shape=(input_size,)))
model.add(Activation(lambda x: np.exp(-np.sum(x**2, axis=1))))
model.add(Dense(output_size))

model.compile(optimizer='adam', loss='mean_squared_error')
------------------------------

